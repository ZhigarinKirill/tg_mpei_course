https://leetcode.com/problems/recover-a-tree-from-preorder-traversal/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    
     TreeNode* new_tree(string s, int &ind, int lev) {
        if (ind >= s.length()) 
            return nullptr;
        int count=0;
        while(s[ind + count] == '-'){count++;}  
        if(count == lev){
            ind += count;
            int val = 0;
            while(isdigit(s[ind])){
                val = 10*val + (s[ind] - '0');
                ind++;
            }
            
            TreeNode *node = new TreeNode(val);
            node->left = new_tree(s, ind, lev + 1);
            node->right = new_tree(s, ind, lev + 1);
            return node;
        }
        return nullptr;
    }
    
    TreeNode* recoverFromPreorder(string S) {
        int num = 0, level = 0;
        return new_tree(S, num, level);     
    }
};