https://leetcode.com/problems/split-linked-list-in-parts/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* root, int k) {
       
        vector<ListNode*> hvec;
        int am = 0;
        ListNode* node = root;
        ListNode* hnode = nullptr;
        ListNode* exnode = root;
        ListNode* SubN = root;
        
        while (node){
            am++;
            node = node->next;
        }
        
        int s = am / k;
        int sur = am % k;
        
        for (int i = 0; i < k; i++){
            int subS = s;
            for (subS; 0 < subS; subS--){
                
                hnode = exnode ;
                
                exnode = exnode->next;   
            } 
                if (sur > 0){
                    
                    hnode = exnode ;
                    exnode = exnode->next;    
                    --sur;
                    
                }

            hvec.push_back(SubN);
            if (hnode){
                hnode->next = nullptr;
            }
            SubN = exnode;
        }
        