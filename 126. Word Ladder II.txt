//https://leetcode.com/problems/word-ladder-ii/
class Solution {
public:
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> dict(wordList.begin(), wordList.end());
       // dict.erase(beginWord);
        queue<vector<string>> q;
        vector<vector<string>> res;
        q.push({beginWord});
        bool fl = false;
        while(!q.empty()) {
            int size = q.size();
            unordered_set<string> next_lvl;
            for(int i = 0; i < size; ++i ) {
                vector<string> cur_lvl = q.front();
                q.pop();
                string cur_word = cur_lvl.back();
                if( cur_word == endWord ) {
                    fl = true;
                    res.push_back(cur_lvl);
                } 
                else {
                    for(int i = 0; i < cur_word.size(); ++i) {
                        char source_ch = cur_word[i];
                        for( char ch = 'a' ; ch <= 'z' ; ++ch ) {
                            if( ch == source_ch ) continue;
                            cur_word[i] = ch;
                            if(dict.find(cur_word) != dict.end() ) {
                                next_lvl.insert(cur_word);
                                q.push(cur_lvl);
                                q.back().push_back(cur_word);
                            }
                        }
                        cur_word[i] = source_ch;
                    }
                }
            }
            if(fl)
                break;
            for(const auto& n : next_lvl ){
                dict.erase(n);
            }
        }
            return res;
        
    }
};