//https://leetcode.com/problems/clone-graph/
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;

    Node() {}

    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/
class Solution {
public:
    
    Node* dfs(Node *node, map<int, Node*> &g, map<int, bool> &vis) {
        Node *root = new Node(node->val, {});
        vector<Node*> nb;
        g[root->val] = root;
        vis[node->val] = 1;
        for (int i = 0; i < node->neighbors.size(); i++) {
            if (!vis[node->neighbors[i]->val])
                root->neighbors.push_back(dfs(node->neighbors[i], g, vis));
            else
                root->neighbors.push_back(g[node->neighbors[i]->val]);
                    
                
        }
        
        return root;
    }
    
    
    Node* cloneGraph(Node* node) {
        map<int, Node*> g;
        map<int, bool> vis;
        Node* root = new Node();
        root = dfs(node, g, vis);
        return root;
    }
};